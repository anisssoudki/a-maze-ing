Rails-js project

modules: player, maze, ball, goal 

maze module concers : 
1- how to generate the maze
2-how to draw on the screen
3-key mapping of ball or controlled object
4-detecting the collision between ball and goal
5- we need an algorithm to generate the maze 
6- idea of recursion comes into play 
7-i'm probably going to use matter.js (a library for js )
8- matter.js has the ability to map key presses to movements of shapes 
9- matter.js has the ability to detect collisions between different shapes
10- link for matter.js documentation https://brm.io/matter-js/
11- matter.js github https://github.com/liabru/matter-js#install we can use npm install or use a cdn to link this library
12- link for cdn https://www.cdnpkg.com/matter-js
script should have this in it inside of index.html
	https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.14.2/matter.min.js

matter js terminology to be aware of: 

World => object that contains all of the different "objects" in the matter app 

engine => reads the current state of the world object, then calculate changes in positions of all the different shapes 

runner => gets the engine and world to work together, runs 60 frames per second (games usually run in an infinte loop think about this as an infinte loop using regular javascript)

render => does what it means it renders things on the screen 
body => A shape we are displaying can be a circle rect or whatever matter offers us 



this is one of the source codes of one of the example matter.js library gives us https://github.com/liabru/matter-js/blob/master/examples/mixed.js we are able to see how it works we use Matter.(keyword) where key word can be engine render runner ect... 
in our code we are going to use destructuring to make things simpler the code in the link is written with var a while back but we are gonna use const because its a better way of declaring variables

so far we have one shape on the screen if we look at the world variable in the console we can see a lot of properties that matter.js gives us stuff like position or speed

so far I have set up matter js and displayed a wall around the canvas now, im gonna start some of the backend functionality to see what data im going to utilize in the data base 
there is 2 ways i can do this 
the first one would be to have a player signup/login, pick a difficulty and the difficulty will be one of the params of the maze class than when the game finishes it will submit the score which is gonna be the difficulty level times a timer, so there is still a lot of work to do...  but the idea is having a player and a game 
game belongs to a player and a player can have many games those games will have attributes such as time or score and difficulty.

---------------------using fetch from hell----------------------------
-----------------------audio implementation notes---------------------
------------------------events notes---------------------------
-----------------------player class notes------------------------
--------------------------maze class notes-------------------



		-------------------timer class notes---------------------
first off i decided to take the input from the user only once to build
everything for him instead of entering 3 inputs or what not 
extracted  the timer from difficultylevel to make the game harder but give fair time to the player in order to finish the maze

		-----svg or scalable vector graphics notes---
svg is scalable vector graphics its an html element that we can use to draw a circle or arbitrary shapes on the screen
one of the properties is permimeter which is basically radius times pi times 2 
we can take advantage of that and the dasharray property in the circle we displayed to do something cool like have the border fill dissapear as the timer tick goes on

** Math in javascript is weird try 1.9 -1 lol 

offset formula that we need in order to make the circle earase itself in synchrony with the timer 

offset = (perimeter*timeRemaining)/totalDuration - perimeter
at the start the circle border is filled and dasharray is gonna equal to perimeter 
and dashoffset will be 0 note dash offset removes the border clockwise and counterclockise depending on negative or positve value 
at the end we should have dasharray = perimeter and dashoffset = -1*perimeter 
because we are erasing or we can do 1*permiter to make the circle erase the other way arround. this is the last thng i have to implement than move on to building the maze

--------------------------grid generation notes-------------------
to generate a 2d array we can do 2 for loops inside of each other 
and push the second loop to the first array loop 
grid = [];
for (let i=0; i<3;i++ ){
	grid.push([]); we are pushing empty array to 0,1,2 indexes
	for(let j=0;j<3;j++){
 }
}
another way is to do this 
const grid = Array(3).fill(null).map(() => Array(3).fill(false))
saying make 3 arrays: 
[null,null,null]
[null,null,null]
[null,null,null]
than.map will map the false values to the null values in the array 
there is a grid generation schema in theimages file hope it would make more sense if anyone is confused here 
if ur confused about the grid just for a min dont think about the outer walls and think about the inside the diagram below shows us v = vertical h=horizonal
v|	v|
h_ h_ h_
v|	v|
h_ h_ h_
v|	v|

if we would map ths to 2 arrays vertical and horizontal 
we would have this v = [[value,value],
						[value,value],
						[value,value]
					   ]
					 h= [
						[value,value,value],
						[value,value,value]
					 	]  

after this and starting at a random point 
 const stepThroughCell = (row,column) => {
                         this is where the algorithm steps falls in:
1. if i have visited the cell at [row,column],then return 
2. mark this cell as being visited using grid array (update false to true)
3.assemble randomly-ordered list of neighbors 
4.for each neighbor... {
	1. check to see if that neighbors is out of bounds
	in order to prevent visiting a cell that doesnt exist 
	2.if we have visited that neighbor continue to next neighbor
	3.remove a wall from either horizonals or verticals 
	4. visit that next cell 
} 

                        }